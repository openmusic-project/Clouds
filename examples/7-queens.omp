; OM File Header - Saved 2009/10/22 17:10:01
; (6.04 :patc (om-make-point 115 169) (om-make-point 528 68) (om-make-point 779 551) "No documentation " 183 0 nil "2008/11/07 15:12:13")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "7-queens" (quote ((om-load-boxcomment "comment" (om-make-point 259 349) (quote "This is a very classical CSP called the n-queens problem.$$The goal is to place n (here, 12) queens on a chessboard of size n*n (here 12*12) so that no queen can attack another. Remember that a queen attack another when they are either on the same line, or colon, or diagonal.$The simplest modelisation as a CSP is to represent each queen by a variable between 1 and n, its vertical position on the chessborad. Then the vertical constraint is automatically satisfied.$Looking for permutation of the serie 1 2 3 ... n, we also assure the horizontal constraint to be automatically satisfied.$The two other constraints, one for each diagonal, are stated ine the cree-varperm patch.$$Open the maquette to see a solution.$$") "" (om-make-point 436 114) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote maqabs) "mymaquette222" (om-load-maq-abs1 "mymaquette" (quote ((om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6300) (6200) (6300))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 11000 1000 (om-make-color 1 1 1) nil t 11 30 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7000) (6900) (7000))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 10000 1000 (om-make-color 1 1 1) nil t 11 100 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6700) (6600) (6700))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 9000 1000 (om-make-color 1 1 1) nil t 11 70 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6500) (6400) (6500))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 8000 1000 (om-make-color 1 1 1) nil t 11 50 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6100) (6000) (6100))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 7000 1000 (om-make-color 1 1 1) nil t 11 10 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6900) (6800) (6900))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 6000 1000 (om-make-color 1 1 1) nil t 11 90 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7200) (7100) (7200))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 5000 1000 (om-make-color 1 1 1) nil t 11 120 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (6800) (6700) (6800))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 4000 1000 (om-make-color 1 1 1) nil t 11 80 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6200) (6100) (6200))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 3000 1000 (om-make-color 1 1 1) nil t 11 20 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6400) (6300) (6400))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 2000 1000 (om-make-color 1 1 1) nil t 11 40 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6600) (6500) (6600))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 1000 1000 (om-make-color 1 1 1) nil t 11 60 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "tempobj" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7100) (7000) (7100))) :lonset (quote (0 250 500 750 1000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2008/11/07 14:57:42" "2008/11/07 15:07:16"))) copy)) 1 0 1000 (om-make-color 1 1 1) nil t 11 110 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (quote nil) (quote (0 13200 -13 132)) (quote nil) (om-make-color 23/85 116/255 173/255) (quote ((4 60) ((4 4)) 16 t)) t 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "time rate number of offsets list" "time" 250) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "Objs" nil))) (om-make-point 318 188) nil nil "o" "mymaquette") (om-load-boxwithed1 (quote box-with-win) "OMLOOP5" (quote omloop) (quote nil) (om-make-point 457 986) nil nil nil (list (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 150 170) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 5 170) nil nil nil 0)) (quote nil) 1 "omloop5" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 263 327) nil nil nil (list (om-load-boxcall (quote lispfun) "OM-MAKE-COLOR" (quote om-make-color) (quote ((om-load-inputfun (quote input-funbox) "R" "R" 1) (om-load-inputfun (quote input-funbox) "G" "G" 1) (om-load-inputfun (quote input-funbox) "B" "B" 1))) (om-make-point 98 392) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 345 197) (om-make-point 47 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" (list 6200 6000 5900 6000)))) (om-make-point 423 253) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 250)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 309 338) (om-make-point 80 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6000) (5900) (6000))) :lonset (quote (0 583 1181 1778 2778)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode)) (list nil nil (quote t) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0)) nil nil nil nil) (om-load-boxin "input1" 1 (om-make-point 290 490) "no documentation" "input1" nil nil) (om-load-boxcall (quote genfun) "ADDBOX2MAQUETTE" (quote addbox2maquette) (quote ((om-load-inputfun (quote input-funbox) "The temporal object" "SELF" nil) (om-load-inputfun (quote input-funbox) "the maquette" "MAQUETTE" nil))) (om-make-point 199 552) nil nil nil "addbox2maquette" 1) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 10))) (om-make-point 204 238) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1000))) (om-make-point 46 412) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 62 274) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 113 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 10))) (om-make-point 12 341) nil nil nil nil 1) (om-load-editor-box1 "TEMPORALBOX" (quote temporalbox) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "no documentation" "EXTEND" 1000) (om-load-inputfun (quote input-funbox) "no documentation" "COLORFRAME" (quote *light-blue-color*)) (om-load-inputfun (quote input-funbox) "no documentation" "VALUE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "POSY" 0) (om-load-inputfun (quote input-funbox) "no documentation" "STRECH-FACT" 1) (om-load-inputfun (quote input-funbox) "no documentation" "SIZEY" 10) (om-load-inputfun (quote input-funbox) "no documentation" "FREE-STORE" 0) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" nil))) (om-make-point 112 450) (om-make-point 116 51) (om-load-tempobj1 nil (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote omlistinstance) :name nil :icon 177))) (setf (instance copy) nil) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) (setf (create-info copy) (quote (nil "2008/11/07 15:07:16"))) copy)) 0 0 2000 (om-make-color 26/85 26/51 194/255) nil t 10 0 1 0 (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "") nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0)) nil nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 125) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 155 68) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 414 617) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 626) nil nil nil 0)) (quote ((12 0 1 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (11 0 5 0 nil 0) (4 0 5 1 nil 0) (12 0 6 0 nil 0) (10 0 7 0 nil 0) (9 0 8 0 nil 0) (13 0 9 0 nil 0) (8 0 10 1 nil 0) (7 0 11 1 nil 0) (0 0 11 3 nil 0) (6 0 11 5 nil 0) (8 0 11 7 nil 0) (3 0 11 9 nil 0) (13 0 12 0 nil 0) (4 0 14 0 nil 0) (5 0 15 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 12) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 159 38) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 300 269) nil nil nil (list (om-load-boxcall (quote genfun) "REMOVETEMPORALBOX" (quote removetemporalbox) (quote ((om-load-inputfun (quote input-funbox) "the temporal object" "SELF" nil))) (om-make-point 120 266) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 137 182) nil nil nil nil 1) (om-load-boxcall (quote genfun) "TEMPORALBOXES" (quote temporalboxes) (quote ((om-load-inputfun (quote input-funbox) "A maquette" "SELF" nil))) (om-make-point 74 115) nil nil nil "temporalboxes" 1) (om-load-boxin "input0" 0 (om-make-point 282 39) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 348 431) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 101 440) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 0 nil 0))) 1 "clear-maquette" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 521 1080) nil nil nil (list (om-load-boxcall (quote lispfun) "SET-MUS-COLOR" (quote set-mus-color) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "COLOR" "COLOR" 212))) (om-make-point 467 348) nil nil nil nil 1) (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 423 447) nil nil nil 2) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 360 561) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM*2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 345 197) (om-make-point 47 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" (list 6200 6000 5900 6000)))) (om-make-point 423 253) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 250)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 309 338) (om-make-point 80 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6000) (5900) (6000))) :lonset (quote (0 583 1181 1778 2778)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode)) (list nil nil (quote t) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0)) nil nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 108 387) (om-make-point 58 24) 175082 "175082" nil) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 10))) (om-make-point 204 238) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1000))) (om-make-point 46 412) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 62 274) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 113 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 10))) (om-make-point 12 341) nil nil nil nil 1) (om-load-editor-box1 "TEMPORALBOX" (quote temporalbox) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "no documentation" "EXTEND" 1000) (om-load-inputfun (quote input-funbox) "no documentation" "COLORFRAME" (quote *light-blue-color*)) (om-load-inputfun (quote input-funbox) "no documentation" "VALUE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "POSY" 0) (om-load-inputfun (quote input-funbox) "no documentation" "STRECH-FACT" 1) (om-load-inputfun (quote input-funbox) "no documentation" "SIZEY" 10) (om-load-inputfun (quote input-funbox) "no documentation" "FREE-STORE" 0) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" nil))) (om-make-point 122 448) (om-make-point 116 51) (om-load-tempobj1 nil (quote nil) (list (quote yourobj) nil) 0 0 2000 (om-make-color 0.772 0.855 0.788) nil t 10 0 1 0 (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation") nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0)) nil nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 125) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 155 68) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 414 617) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 626) nil nil nil 0)) (quote ((5 0 0 0 nil 0) (0 0 1 0 nil 0) (5 0 1 1 nil 0) (12 0 2 0 nil 0) (13 0 3 0 nil 0) (3 0 4 0 nil 0) (4 0 5 1 nil 0) (13 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (14 0 10 0 nil 0) (9 0 11 1 nil 0) (8 0 12 1 nil 0) (6 0 12 3 nil 0) (7 0 12 5 nil 0) (9 0 12 7 nil 0) (5 0 12 9 nil 0) (14 0 13 0 nil 0) (2 1 15 0 nil 0) (2 0 16 0 nil 0))) 1 "omloop" nil) (om-load-boxwithed1 (quote box-with-win) "CREE-VARPERM" (quote cree-varperm) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DOM" nil))) (om-make-point 151 117) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 260 227) (quote "The first ouput of the i icons give the i-th variable. The second ouput gives not the value of the i-th variable but the index i itself. Same for the i+$$They appear when typing n and disappear when typing N") "" (om-make-point 344 132) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-varstate "state1" 2 (om-make-point 281 366) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "ALLDIFFC1" (quote alldiffc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 254 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ALLDIFFC" (quote alldiffc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 98 189) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+1" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 229 140) (om-make-point 49 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-1" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 122 117) (om-make-point 61 27) nil nil nil 1) (om-load-var-i "i" t (om-make-point 173 2) "no documentation" nil nil (om-make-point 36 61) 2) (om-load-varstate "state" t (om-make-point 157 373) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 277 0) "no documentation" nil nil nil)) (quote ((2 0 1 0 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (6 0 4 0 nil 0) (6 1 4 1 nil 0) (6 0 5 0 nil 0) (6 1 5 1 nil 0) (3 0 7 0 nil 0))) 2 "cree-varperm" nil) (om-load-boxcall (quote genfun) "RESOLUTION1" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil))) (om-make-point 207 415) (om-make-point 65 61) nil nil "resolution" 1))) (quote ((7 1 3 0 nil 0) (5 0 3 1 nil 0) (1 0 5 0 nil 0) (4 0 7 0 nil 0) (7 0 8 0 nil 0) (3 0 8 1 nil 0))) nil 6.04))
