; OM File Header - Saved 2024/12/24 14:46:06
; (7.06 :patc (om-make-point 261 103) (om-make-point 0 0) (om-make-point 200 150) "No documentation " 183 0 nil "2024/12/24 14:45:59")
; End File Header
(in-package :om)(load-lib-for (quote ("repmus")))(setf *om-current-persistent* (om-load-patch1 "6-accords" (quote ((om-load-boxcomment "comment" (om-make-point 258 278) (quote "Here the input is a set of random chords, represented by their midic values (output of the generation-aleatoire function).$The goal is to find a permutation where there is at least two common notes between two successive chords.$$There may be no solution to the CSP (depending on the random chords). In this case the resolution box WILL NEVER STOP.$But some approximate solutions are printed in the chord-seq connected to the second input of resolution, and the user can stop the resolution process when she wants to keep the approximate solution (by choosing \"abort' in the Lisp menu or typing Option . )") "" (om-make-point 300 82) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "RESOLUTION" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil))) (om-make-point 107 696) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ21111" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 244 422) (om-make-point 241 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400 7800 6200 7000) (4600 4200 7800 6200) (6600 7400 4600 4200) (6600 8600 4600 5800) (8200 4600 7000 6600) (4600 8200 7000 7400) (7400 5000 9000 7000) (5000 7000 6600 6200) (6600 5400 5000 5800) (5000 8200 5400 4200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 51/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ2111" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 500)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 191 601) (om-make-point 213 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7800) (6200) (7000) (4600) (4200) (6600) (7400) (8600) (5800) (8200) (7000) (7400) (5000) (9000) (6600) (6200) (5400) (5800) (8200) (4200))) :lonset (quote (0 0 0 0 1000 1000 2000 2000 3000 3000 4000 4000 5000 6000 6000 7000 7000 8000 8000 9000 9000 9000)) :ldur (quote ((1000) (2000) (2000) (1000) (5000) (2000) (3000) (1000) (1000) (1000) (2000) (4000) (2000) (4000) (1000) (2000) (1000) (2000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 51/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "CHSEQ->POLY11" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "APPROX" 2))) (om-make-point 172 524) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENERATION-ALEATOIRE1" (quote generation-aleatoire) (quote ((om-load-inputfun (quote input-funbox) "N-ACC" "N-ACC" 10) (om-load-inputfun (quote input-funbox) "N-NOTES" "N-NOTES" 4) (om-load-inputfun (quote input-funbox) "DOM" "DOM" nil))) (om-make-point 71 180) nil (list (list (list 8200 4600 7000 6600) (list 6600 5400 5000 5800) (list 7400 7800 6200 7000) (list 5000 8200 5400 4200) (list 4600 8200 7000 7400) (list 7400 5000 9000 7000) (list 5000 7000 6600 6200) (list 4600 4200 7800 6200) (list 6600 7400 4600 4200) (list 6600 8600 4600 5800))) "&" "generation-aleatoire" 1) (om-load-boxcall (quote genfun) "ARITHM-SER1" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 48) (om-load-inputfun (quote input-funbox) "step" "STEP" 4))) (om-make-point 103 28) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+1" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 42) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 176 86) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 165 133) (om-make-point 24 35) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ11" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 46 243) (om-make-point 182 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8200 4600 7000 6600) (6600 5400 5000 5800) (7400 7800 6200 7000) (5000 8200 5400 4200) (4600 8200 7000 7400) (7400 5000 9000 7000) (5000 7000 6600 6200) (4600 4200 7800 6200) (6600 7400 4600 4200) (6600 8600 4600 5800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 51/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "CREE-VARPERM1" (quote cree-varperm) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DOM" nil))) (om-make-point 73 359) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 209) (om-make-point 23 20) 2 "2" nil) (om-load-boxcall (quote genfun) "MINIMIZEC" (quote minimizec) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "B" nil) (om-load-inputfun (quote input-funbox) "no documentation" "C" nil))) (om-make-point 148 345) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote genfun) "OM-MAX" (quote om-max) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 0))) (om-make-point 79 398) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 40 349) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 22 235) "no documentation" nil nil nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 59 310) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-INTERSECT" (quote x-intersect) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 113 209) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 204 121) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 88 132) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 84 461) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 68 37) "no documentation" nil nil nil))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (8 0 5 0 nil 0) (8 0 6 0 nil 0) (0 0 7 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 221 239) nil nil "l" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 123 240) nil nil nil "list" 1) (om-load-var-i+ "i+" 1 (om-make-point 160 124) "no documentation" nil nil nil 1) (om-load-var-i "i" t (om-make-point 101 124) "no documentation" nil nil nil 1) (om-load-varstate "state" t (om-make-point 163 431) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 246 47) "no documentation" nil nil nil)) (quote ((3 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 2 1 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (1 0 6 0 nil 0))) 2 "cree-varperm" nil))) (quote ((10 0 1 0 nil 0) (3 0 1 1 nil 0) (10 1 2 1 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (8 0 5 2 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (5 0 9 1 nil 0) (9 1 10 0 nil 0))) nil 6.04))
