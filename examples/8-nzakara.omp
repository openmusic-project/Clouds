; OM File Header - Saved 2009/10/22 17:10:01
; (6.04 :patc (om-make-point 165 232) (om-make-point 50 50) (om-make-point 683 594) "No documentation " 183 0 nil "2008/11/07 15:12:13")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "8-nzakara" (quote ((om-load-boxcomment "comment" (om-make-point 160 28) (quote "Optional input to stop he solver") "" (om-make-point 133 413) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 100 409) (om-make-point 20 28) 4 "4" nil) (om-load-boxcomment "comment" (om-make-point 281 246) (quote "This CSP is due to Marc Chemillier and deals with some musical motives played in Central Africa.$$The goal is to find sort of a canon.$$Here the fourth (optional) input of the resolution box is used to stop the solver, because the problem has no solution and the solver would normally never stop calculating.$This input is a value which determines when the solver has to stop. It is zero by default, but here we know the CSP to have no solution with error less than 4.$") "" (om-make-point 313 162) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 104 84) (om-make-point 166 85) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6400) (6000 6700) (6200 6700) (6200 7000) (6400 7000))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 57 40) (om-make-point 350 28) (list (list 6000 6400) (list 6000 6700) (list 6200 6700) (list 6200 7000) (list 6400 7000)) "((6000 6400) (6000 6700) (6200 6700) (6200 7000) (6400 7000))" nil) (om-load-editor-box1 "CHORD-SEQ2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 500)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 120 269) (om-make-point 119 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200 6700) (6000 6400) (6000 6700) (6200 7000) (6400 7000) (6000 6700) (6200 7000) (6000 6700) (6200 7000) (6000 6400))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil nil (quote t) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 12/25 nil 1000 0 18350450 2621450 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "RESOLUTION1" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil) (om-load-inputfun (quote input-funbox) "else" "L-TABU" 20) (om-load-inputfun (quote input-funbox) "else" "EPSILON" 4))) (om-make-point 62 439) nil nil nil "resolution" 1) (om-load-boxwithed1 (quote box-with-win) "CREE-VARCYCLE1" (quote cree-varcycle) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DOM" (list (list 6000 6400) (list 6000 6700) (list 6200 6700) (list 6200 7000) (list 6400 7000))) (om-load-inputfun (quote input-funbox) "no documentation" "LONGUEUR" 10))) (om-make-point 49 197) nil nil nil (list (om-load-boxcall (quote genfun) "EQUALC" (quote equalc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "A" nil) (om-load-inputfun (quote input-funbox) "no documentation" "B" nil))) (om-make-point 213 450) nil nil nil nil 1) (om-load-varstate "state2" 3 (om-make-point 466 554) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-varstate "state1" 2 (om-make-point 273 571) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-var-i+ "i+3" 4 (om-make-point 196 100) "no documentation" nil nil nil 1) (om-load-var-i+ "i+" 1 (om-make-point 453 160) "no documentation" nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote genfun) "OM=1" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 6200))) (om-make-point 183 166) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 6000))) (om-make-point 46 219) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF1" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" 6700) (om-load-inputfun (quote input-funbox) "else" "ELSE" 7000))) (om-make-point 230 239) (om-make-point 29 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" 6400) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 138 333) (om-make-point 29 53) nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 93 473) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 70 50) "no documentation" nil nil nil))) (quote ((5 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (2 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 43 358) nil nil nil nil) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 73 277) nil nil nil "car" 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 244 349) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NOTEQUALC" (quote notequalc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "A" nil) (om-load-inputfun (quote input-funbox) "no documentation" "B" nil))) (om-make-point 312 354) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NOTEQUALC1" (quote notequalc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "A" nil) (om-load-inputfun (quote input-funbox) "no documentation" "B" nil))) (om-make-point 422 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1000))) (om-make-point 289 452) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1000))) (om-make-point 441 459) nil nil nil nil 1) (om-load-var-i "i" t (om-make-point 100 100) "no documentation" nil nil nil 1) (om-load-varstate "state" t (om-make-point 173 572) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 5 100) "no documentation" nil nil nil)) (quote ((5 0 0 0 nil 0) (7 0 0 1 nil 0) (9 0 1 0 nil 0) (8 0 2 0 nil 0) (6 0 5 0 nil 0) (12 0 6 0 nil 0) (3 0 7 0 nil 0) (12 0 8 0 nil 0) (3 0 8 1 nil 0) (12 0 9 0 nil 0) (4 0 9 1 nil 0) (8 0 10 0 nil 0) (9 0 11 0 nil 0) (0 0 13 0 nil 0))) 2 "cree-varcycle1" nil))) (quote ((4 0 3 1 nil 0) (7 1 5 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 6 3 nil 0) (3 1 7 0 nil 0))) nil 6.04))
