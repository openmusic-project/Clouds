; OM File Header - Saved 2024/12/24 14:46:09
; (7.06 :patc (om-make-point 160 107) (om-make-point 0 0) (om-make-point 200 150) "No documentation " 183 0 nil "2024/12/24 14:46:09")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "5-all-interval" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 120 54) (om-make-point 21 28) 12 "12" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 54) (om-make-point 13 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 332 193) (quote "This is a classical permutation CSP called \"all-interval series\".$$$The goal is to find a musical serie, ie a permutation of the twelve tones, where the intervals between the notes are all different.$A solution is shown in the chord below.$$It may be a little long to solve, and the intermediate (or approximate) solutions are edited in the chord during the resolution process. Open the chord before evaluating the resolution box to see them.$$") "" (om-make-point 343 109) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 430 309) (om-make-point 182 97) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6900 6200 7000 6400 6700 6800 6600 7100 6100 7200 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 3 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t))) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 211 347) (om-make-point 91 88) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6600 7000 6300 6800 6200 7100 6100 7200 6400 6700 6900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil nil nil nil nil))) thechord) nil nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 3 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 243 288) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 60))) (om-make-point 248 227) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RESOLUTION" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil))) (om-make-point 104 458) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "CREE-VARPERM" (quote cree-varperm) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INIT" nil))) (om-make-point 123 161) nil nil nil (list (om-load-boxcall (quote genfun) "ALLDIFFC" (quote alldiffc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 190 298) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 124 226) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 118 190) nil nil nil nil 1) (om-load-var-i+ "i+" 1 (om-make-point 124 100) "no documentation" nil nil nil 1) (om-load-var-i "i" t (om-make-point 100 100) "no documentation" nil nil nil 1) (om-load-varstate "state" t (om-make-point 223 391) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 5 100) "no documentation" nil nil nil)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 5 0 nil 0))) 2 "cree-varperm" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 12) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 96 84) nil nil nil nil 1))) (quote ((5 0 4 1 nil 0) (6 0 5 0 nil 0) (8 1 6 0 nil 0) (8 0 7 0 nil 0) (4 0 7 1 nil 0) (9 0 8 0 nil 0) (1 0 9 0 nil 0) (0 0 9 1 nil 0))) nil 6.04))
