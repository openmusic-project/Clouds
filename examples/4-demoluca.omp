; OM File Header - Saved 2009/10/22 17:10:01
; (6.04 :patc (om-make-point 73 105) (om-make-point 50 50) (om-make-point 655 537) "No documentation " 183 0 nil "2008/11/07 15:12:13")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "4-demoluca" (quote ((om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 74 51) (om-make-point 21 28) 11 "11" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 60 51) (om-make-point 13 28) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 315 266) (quote "This example shows the use of the second output of the cree-var* functions (see documentation) and the second (optional) input of the resolution box.$$This CSP deals with notes, which are represented by their degrees (between 0 for the C and 11 for the B). These intervals between the notes have to belong to a fixed set, see the constraint definition.$$$$$") "" (om-make-point 293 115) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 179 242) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 6000))) (om-make-point 180 294) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 154 351) (om-make-point 136 72) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6500 6600 6200 6300 6700 6300 6200 6600 6200 6100 6500 6600 6700 7100 6700 6600 6700 6000 6700)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil nil (quote t) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -14) 0 0 67/100 nil 1000 3 18350450 2621450 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "RESOLUTION" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil))) (om-make-point 83 452) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 183 122) (om-make-point 26 28) 20 "20" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 11) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 50 81) nil nil nil "arithm-ser" 1) (om-load-boxwithed1 (quote box-with-win) "CREE-VARLISTE" (quote cree-varliste) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DOM" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LONGUEUR" nil))) (om-make-point 102 157) nil nil nil (list (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 86 271) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 204 281) (om-make-point 67 28) (list 1 4 7) "(1 4 7)" nil) (om-load-boxcall (quote genfun) "MEMBERC" (quote memberc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "EL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "B" nil))) (om-make-point 153 372) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 139 213) nil nil nil nil 1) (om-load-var-i+ "i+" 1 (om-make-point 172 99) "no documentation" nil nil nil 1) (om-load-var-i "i" t (om-make-point 100 100) "no documentation" nil nil nil 1) (om-load-varstate "state" t (om-make-point 144 495) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 14 146) "no documentation" nil nil nil)) (quote ((3 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 6 0 nil 0))) 2 "cree-varliste" nil))) (quote ((9 1 3 0 nil 0) (3 0 4 0 nil 0) (4 0 5 1 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 8 0 nil 0) (0 0 8 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) nil 6.04))
