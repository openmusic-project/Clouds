; OM File Header - Saved 2024/12/24 14:46:06
; (7.06 :patc (om-make-point 248 48) (om-make-point 0 0) (om-make-point 635 452) "No documentation " 183 0 nil "2024/12/24 14:45:59")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "3-Third example" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 84 50) (om-make-point 37 28) 7200 "7200" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 49) (om-make-point 37 28) 6000 "6000" nil) (om-load-boxcomment "comment" (om-make-point 260 258) (quote "The cree-varcycle function allows to define a CSP with the variables considered as a cycle.$$It is nearly the same as the cree-varliste function, except that the constraint also state between the last variables and the first one, as if the list of variables were repeated in a loop.$$This CSP generates a list of four midicents values where the intervals must be seconds, either augmented or diminuted.$Note that it is also the case between the last note and the first one, because of the cycle.") "" (om-make-point 271 143) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 35 306) (om-make-point 189 97) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote (((0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 6000) (om-load-inputfun (quote input-funbox) "end " "END" 7200) (om-load-inputfun (quote input-funbox) "step" "STEP" 100))) (om-make-point 60 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RESOLUTION11" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil))) (om-make-point 91 235) nil nil nil "resolution" 1) (om-load-boxwithed1 (quote box-with-win) "CREE-VARCYCLE" (quote cree-varcycle) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DOM" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LONGUEUR" 4))) (om-make-point 67 154) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 182 168) (om-make-point 143 20) (list 100 -100 200 -200) "(100 -100 200 -200)" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 120 171) nil nil nil nil 1) (om-load-var-i+ "i+" 1 (om-make-point 124 100) "no documentation" nil nil nil 1) (om-load-boxcall (quote genfun) "MEMBERC" (quote memberc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "EL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "B" nil))) (om-make-point 153 217) nil nil nil nil 1) (om-load-var-i "i" t (om-make-point 100 100) "no documentation" nil nil nil 1) (om-load-varstate "state" t (om-make-point 121 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-varliste "liste" t (om-make-point 5 100) "no documentation" nil nil nil)) (quote ((4 0 1 0 nil 0) (2 0 1 1 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (3 0 5 0 nil 0))) 2 "cree-varcycle" nil))) (quote ((5 0 3 2 nil 0) (1 0 4 0 nil 0) (0 0 4 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0))) nil 6.04))
